# to get employee that has the 3rd highest salary:

SELECT name, salary from employees ORDER BY salary DESC LIMIT 2,1;
-----------------------------------------
# to find first 3 highest salaries with no duplicates:

select * from(select distinct sal from emp order by sal desc)
where rownum<=3

minus

select * from(select distinct sal from emp order by sal desc)
where rownum<=2
-----------------------------------------
# Create an index on the "salary" column of the employee table:

CREATE INDEX idx_salary ON employee(salary);
-----------------------------------------
# Get all employees who have salary as 1000

SELECT * FROM employee WHERE salary = 1000;
-----------------------------------------
# create virtual column and find the lowest rank based on marks:

# assume we have students table with col: id, name, marks:

CREATE TABLE students(
	id INT PRIMARY KEY,
	name VARCHAR(100),
	marks INT
)

INSERT INTO students VALUES
	(1, 'Parth' 85),
	(1, 'Parth' 92),
	(1, 'Parth' 73)

CREATE VIEW rank_view AS
SELECT id, name, marks, DENSE_RANK() OVER ORDER BY marks ASC AS rank
FROM students

SELECT * FROM rank_view
WHERE rank = 1
-----------------------------------------
# Create a view that selects every product in the products table with a price higher than average price

CREATE VIEW prod_above AS
SELECT Productname, Price FROM Products 
WHERE Price > SELECT AVG(Price) FROM Products


----------------------
#have employee table and want to find people with middle name as "kumar"

SELECT * from emptable WHERE middlename like %kumar%

----------------------
Create table employee(
	id INT PRIMARY KEY,
	name VARCHAR(50),
	age INT NOT NULL
);

INSERT INTO employee VALUES(1, "Aman", 26);
Select * from employee

----------------------

Types of SQL Commands:
- DDL: create, alter, truncate, drop
- DQL: select
- DML: insert, update, delete
- DCL: grant, revoke

----------------------
Keys:
Primary Key:
- it is a column that uniquely identifies each row

Foreign Key:
- A column that refers to primary key of different table

----------------------
Constraints:
- NOT NULL
- UNIQUE
- DEFAULT
- CHECK

----------------------
Clauses:

WHERE: define some condition
- Select col1, col2, FROM table_name 
- WHERE city = "NYC"

LIMIT: sets an upper limit on number of rows to be returned:
- Select * from employee LIMIT 3;

ORDER BY: sort in ASC or DESC order
- Select * from employee 
- ORDER BY salary DESC
- LIMIT 2;

----------------------
Aggregate functions: perform calculations on data:
- COUNT,MAX, MIN,SUM, AVG
- Select AVG(salary) from employee 

----------------------
GROUP BY: group rows

- Ex: Count number of employees in each city:
- SELECT city, count(name) FROM employee GROUP BY city;

- Ex: query to find avg salary in each city in asc order:
- SELECT city, avg(salary) FROM employee GROUP BY city ORDER BY city

- Ex: find the total payments according to each payment method:
- SELECT mode, count(customer) FROM payment GROUP BY mode;

----------------------
HAVING Clause: used when we want to apply any condition after grouping.

- Ex: Count number of employees in each city where max age greater than 35:
- SELECT count(name), city FROM employee GROUP BY city, HAVING max(age)>35


General Order:
- SELECT col
- FROM table
- WHERE condition
- GROUP BY columns
- HAVING condition
- ORDER BY column ASC



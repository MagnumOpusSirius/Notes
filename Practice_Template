Practice Template:

Solve 10 React questions everyday

Solve 5 Spring Batch questions everyday

Solve 10 Java questions everyday

Solve 10 Spring Boot questions everyday

Solve 5 Hibernate/JDBC/JPA questions everyday

Solve 10 SQL questions everyday

Solve 5 Docker/Kubernetes/AWS questions everyday




Ask the document application so a generative ai project:
	- create a document retrieval app where we upload a document and reads data from it based on the query entered by the user and generates a response


============================================
Microservices in Spring:

	- Spring Cloud Config Server
		- get configuration from application props
		- connect server to local git repo
		- setup multiple environments in git repo
		- configure profiles

	- Feign REST Client for service communcation

	- Client side load balancing with Ribbon and post Boot 2.4
		- Cloud Loadbalancer

	- Setup Eureka Discovery Server and connect to microservice
		- Distribute calls using Eureka and Ribbon

	- API Gateway
		- Zuul Gateway and logging filter
		- execute request through gateway
		- routes, predicates, security
	
	- Distributed Tracing:
		- connect services to Spring Cloud Sleuth or Zipkin 
		- Rabbit MQ/ Kafka
		- Zipkin UI dashboard for trace and span id
		- Spring Cloud bus

	- Fault tolerance
		- Circuit breaker (Resiliance4J package)
		- Rate Limiting
		- Retry


============================================
Docker:

	- deploy spring boot app
		- launch zipkin container using docker
		- 
	- concepts
		- registry
		- repo, tag
		- image, containers
		- docker client vs docker engine

	- commands:
		- stats, system

	- create container image for microservice
		- docker compose
		- run eureka discovery server, gateway with docker compose


============================================
Kubernetes:

	- Deploy the spring boot app to kubernetes cluster

	- Commands:
		- kubectl apply, scale

	- Concepts: 
		- pods, ReplicaSets, cluster, master and worker nodes
		- deployment file, service files
		- centralized configuration using config maps
		- centralized logging and monitering in Google Kubernetes
		- configure liveness and readiness probes for services

	- Autoscaling services


============================================
Unit Testing:

	- Junit:

	- Mockito:


============================================
Hibernate/JPA:

	- JDBC:	
		- Drivers

	- EntityManager

	- DataJPA

============================================
Functional Programming:

	- Stream API
		- streams, filter, map

	- Lamda Expression/Method References

	- Optional class

============================================
DSA:
	
	- Arrays:

		- Concepts
			- Types
			- Memory
			- Ways to create array
			- Insert, access, traversal, search, delete
			- Time and space of 1D array
			- Create/access/traverse/search/deletet 2D array

		- LeetCode:
			- Middle function
			- 2D arrays
			- Best Score
			- Missing Number
			- Duplicate Number
			- Remove Duplicates from sorted array
			- Best time to buy and sell stocks
			- Two Sum
			- Finding a number in an array
			- Max product of two integers
			- IsUnique/Contains Duplicate
			- Permutation
			- Rotate Matrix

	- ArrayList:

		- Concepts:
			- Memory and time complexity
			- Create, insert, access, traversal, search, delete

		- Time Complexity:
			- method that returns sum and product of array
			- print pairs method
			- print unordered pairs method
			- reverse array function

	- LinkedList:

		- Concepts:
			- LinkedList vs Array
			- Types
			- Memory
		
		- Singly LinkedList:
			- Create
			- Insertion algorithm/method
			- Traversal
			- Search
			- Delete node/method/entirety
			- Time/Space

		- Circular Singly LinkedList:
			- Insertion algorithm
			- Traversal
			- Searching a node
			- Deletion algorithm
			- Delete entire list
			- Time/Space

		- Doubly LinkedList:
			- Create
			- Insertion algo
			- Traversal
			- Reverse traversal
			- Search a node
			- Delete algo
			- Delete entire list
			- Time/Space

		- Circular Doubly LinkedList:
			- Create
			- Insertion Algo
			- Traversal
			- Reverse traversal
			- Search for a node
			- Deletion algo
			- Delete entire list
			- Time/Space

		- LeetCode:
			- Remove Dups
			- Return Nth to Last
			- Partition
			- Sum Lists
			- Intersection
			- SinglyLinkedList push, pop, get, rotate, set, remove

	- Stack:

	 	- Concepts:
	 		- Using Array:
	 			- Create, isEmpty, isFull
	 			- Push, Pop, Peek, Delete
	 			- Time Complexity
	 		- Using LinkedList:
	 			- Push, pop, peek, delete, isEmpty
	 			- Time Complexity

	 	- LeetCode:
	 		- Implement a Stack
	 			- Push, pop
	 		- Balanced Parentheses checker

	 - Queue:

	 	- Concepts:
	 		- Linear Queue operations using Array
		 		- Create, isFull, isEmpty, enqueue
		 		- Delete, dequeue, peek, poll
		 		- Time Complexity
		 	- Circular Queue:
		 		- Create, enqueue, isFull, isEmpty
		 		- Dequeue, Peek, Delete, Poll
		 		- Time Complexity
		 	- LinkedList Queue:
		 		- Create, enqueue, isFull, isEmpty
		 		- Dequeue, Peek, Delete, Poll
		 		- Time Complexity

		 - LeetCode:
		 	- Three in one
		 	- Stack Minimum
		 	- Stack of Plates
		 		- Follow UP
		 	- Queue via Stacks
		 	- Animal Shelter

	- Recursion:

		- Concepts:
			- Why do we need it?
			- Recursion, Iterative Solution
			- When to Avoid Recursion
			- Write recursion algo in 3 steps
			- Measure recursive algo

		- Leetcode:
			- Fibonacci series using recursion
			- Sum of Digits
			- Power
			- GCD
			- Decimal to Binary
			- Factorial
			- Product of Array
			- RecursiveRange
			- Reverse
			- Is Palindrome
			- First uppercase
			- Capitalize Word

	- Tree:

		- Concepts:
			- What? Why?
			- Create basic binary tree (BT)
			- Types of BT
			- BT representation
			- Create BT using LinkedList
				- PreOrder, InOrder, PostOrder, LevelOrder
				- Search Method
				- Insert Method
				- Delete Node
				- Delete Entire Tree
			- Create BT using Array
				- Insert Method
				- PreOrder, InOrder, PostOrder, LevelOrder
				- Search Method
				- Delete Node
				- Delete Entire Tree

		- LeetCode:
			- Implement BT
			- InOrder
			- PreOrder
			- PostOrder
			- Minimal Tree
			- 

	- BST:

		- Concepts:
			- Why? What?
			- Create BST
			- Insert Node to BST
			- PreOrder, Post, InOrder traversal, LevelOrder
			- Search, Delete a node, Delete entire BST
			- Time Complexity

	- AVL Tree:

		- Concepts:
			- Why? What?
			- Common Operations:
				- Insert node (left left)
				- Insert node (left right)
				- Insert node (right right)
				- Insert node (right left)
				- Insert node (all together)
				- Delete Node from AVL (LL, LR, RR, RR)
				- Delete node (all together)
			- BST vs AVL?

	- Binary Heap:
		- Concepts:
			- Why? What?
			- Common Operations;
				- Insert node in BH
				- Extract node from BH
				- Delete Node
				- Delete Entire BH
			- Time complexity
	- Trie:
		- Concepts:
			- Why? What?
			- Common Operations:
				- Insert string
				- Search
				- Delete
				- Practial usages


	- Hashing:

		- Concepts:
			- Why? What?
			- Functions
			- Types of Collision Resolution technique direct chaining(Insert)
			- Direct chaining implementation (Search, Delete)
			- Hash Table is full
			- Collision Resolution Technique Linear Probing(insert, search, delete, open addressing: quadratic probing and double hashing)
			- Pros/cons of resolution technique
			- Practical usage

		- LeetCode:


	- Sorting:

		- Concepts:
			- Types of Sorting
				- Bubble
				- Selection
				- Insertion
				- Bucket
				- Merge
				- Quick 
				- Heap

		- LeetCode:


	- Searching Algo:

		- Concepts:
			- Linear Search
			- Binary Search 
			- Time Complexity

		- LeetCode:


	- Graph:

		- Concepts:
			- What? Why?
			- Types:
				- Adjacency Matrix
				- Adjacency List

		- Graph Traversal: BFS and DFS
			- BFS algo (AMatrix or AList)
			- DFS algo (AMatrix or AList)
			- Time Complexity

		- Single Source Shortest Path Problem
			- BFS for SSSPP using AList and AMatrix
			- Why BFS not work with weighted graph?
			- Why DFS not work with SSSP?

		- Dijkstra algo:
			- algo for SSSPP
			- negative cycle
		
		- Bellman Ford algo:
			- algo for SSSPP
			- negative cycle
			- why runs v-1 times?
			- BFS vs Dijkstra, Bellman Ford
			- What is All Pairs Shortest Path Problem?

		- Floyd Warshall algo:
			- Why? Implementation?
			- Negative cycle

		- LeetCode:
			- Route Between Nodes
			- Check Balanced
			- Validate BST
			- Successor
			- Build Order
			- Find Common Ancestor


	- Min Spanning Tree(Disjoin Set):
		- Concepts:
			- Why? What?
			- Disjoint Set


	- Kruskal and Prim's algo:
		- Concepts:
			- Why? What?
			- Prim algo
			- Kruskal algo

	- Greedy algo;
		- Concepts:
			- Why? What?
			- Activity Selection Problem
			- Coin Change Problem
			- Fractional Knapsack

	- Divide and Conquer algo;
		- Concepts:
			- Why? What?
			- Common algo
				- Solve Fibonacci series using this
				- Number factor
				- House Robber
				- Convert One String to another
				- Zero One Knapsack
				- Longest Common Subsequence problem
				- Longest Palindromic subsequence
				- Minimal Cost to Reach Last Cell
				- Number of Paths to reach the last cell with given cost





















